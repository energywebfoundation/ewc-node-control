{"abi":[{"constant":false,"inputs":[],"name":"finalizeChange","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getValidators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"reporter","type":"address"},{"name":"validator","type":"address"},{"name":"blockNumber","type":"uint256"},{"name":"proof","type":"bytes"}],"name":"reportMalicious","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"reporter","type":"address"},{"name":"validator","type":"address"},{"name":"blockNumber","type":"uint256"}],"name":"reportBenign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"","contractName":"IValidatorSetRelayed","deployedBytecode":"","source":"pragma solidity ^0.5.0;\n\n\n/// @title Reporting validator set interface\n/// @dev This interface is used by Aura PoA validator contracts to manage active validators and\n/// send reports on misbehaving validators\ninterface IValidatorSetRelayed {\n\n    /// @notice Called when an initiated change reaches finality and is activated\n    /// It is also called when the contract is first enabled for consensus. In this case,\n    /// the \"change\" finalized is the activation of the initial set\n    /// @dev Should only be valid when msg.sender == SYSTEM (EIP96, 2**160 - 2)\n    function finalizeChange()\n        external;\n\n    /// @notice Reports benign misbehavior of a validator in the current validator set (e.g. validator offline)\n    /// @param reporter Address of the reporter\n    /// @param validator Address of the validator to report\n    /// @param blockNumber The blocknumber to report on\n    function reportBenign(\n        address reporter,\n        address validator,\n        uint256 blockNumber\n    )\n        external;\n\n    /// @notice Reports malicious misbehavior of validator of the current validator set\n    /// and provides proof of that misbehavor, which varies by engine (e.g. double vote)\n    /// @param reporter Address of the reporter\n    /// @param validator Address of the validator to report\n    /// @param blockNumber The blocknumber to report on\n    /// @param proof Proof attached\n    function reportMalicious(\n        address reporter,\n        address validator,\n        uint256 blockNumber,\n        bytes calldata proof\n    )\n        external;\n\n    /// @notice Get current validator set (last enacted or initial if no changes ever made)\n    /// @return List of addresses of the currently active validators\n    function getValidators()\n        external\n        view\n        returns (address[] memory);\n}\n","networks":"{}"}