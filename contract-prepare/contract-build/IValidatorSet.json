{"abi":[{"constant":false,"inputs":[],"name":"finalizeChange","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getValidators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"validator","type":"address"},{"name":"blockNumber","type":"uint256"},{"name":"proof","type":"bytes"}],"name":"reportMalicious","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"validator","type":"address"},{"name":"blockNumber","type":"uint256"}],"name":"reportBenign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_parentHash","type":"bytes32"},{"indexed":false,"name":"_newSet","type":"address[]"}],"name":"InitiateChange","type":"event"}],"bytecode":"","contractName":"IValidatorSet","deployedBytecode":"","source":"pragma solidity ^0.5.0;\n\n\n/// @title Reporting validator set interface\n/// @dev This interface is used by Aura PoA validator contracts to manage active validators and\n/// send reports on misbehaving validators\ninterface IValidatorSet {\n\n    /// @notice Issue this log event to signal a desired change in validator set.\n    /// This will not lead to a change in active validator set until\n    /// finalizeChange is called\n    /// @dev Only the last log event of any block can take effect.\n    /// If a signal is issued while another is being finalized it may never\n    /// take effect\n    /// @param _parentHash The parent block hash. Otherwise the signal will not be recognized\n    /// @param _newSet List of addresses of the desired new validator set\n    event InitiateChange(bytes32 indexed _parentHash, address[] _newSet);\n\n    /// @notice Called when an initiated change reaches finality and is activated.\n    /// It is also called when the contract is first enabled for consensus. In this case,\n    /// the \"change\" finalized is the activation of the initial set\n    /// @dev Only valid when msg.sender == SYSTEM (EIP96, 2**160 - 2)\n    function finalizeChange()\n        external;\n\n    /// @notice Reports benign misbehavior of a validator in the current validator set (e.g. validator offline)\n    /// @param validator Address of the validator to report\n    /// @param blockNumber The blocknumber to report on\n    function reportBenign(address validator, uint256 blockNumber)\n        external;\n\n    /// @notice Reports malicious misbehavior of validator of the current validator set\n    /// and provides proof of that misbehavor, which varies by engine (e.g. double vote).\n    /// @param validator Address of the validator to report.\n    /// @param blockNumber The blocknumber to report on.\n    /// @param proof Proof attached.\n    function reportMalicious(address validator, uint256 blockNumber, bytes calldata proof)\n        external;\n\n    /// @notice Get current validator set (last enacted or initial if no changes ever made).\n    /// @return List of addresses of the currently active validators.\n    function getValidators()\n        external\n        view\n        returns (address[] memory);\n}\n","networks":"{}"}