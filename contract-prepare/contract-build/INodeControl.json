{"abi":[{"constant":false,"inputs":[],"name":"confirmUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_targetValidator","type":"address"}],"name":"retrieveExpectedState","outputs":[{"components":[{"name":"dockerSha","type":"bytes"},{"name":"dockerName","type":"string"},{"name":"chainSpecSha","type":"bytes"},{"name":"chainSpecUrl","type":"string"},{"name":"isSigning","type":"bool"},{"name":"updateIntroduced","type":"uint256"},{"name":"updateConfirmed","type":"uint256"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_targetValidator","type":"address"}],"name":"isUpdateConfirmed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_targetValidator","type":"address"}],"name":"UpdateAvailable","type":"event"}],"bytecode":"","contractName":"INodeControl","deployedBytecode":"","source":"pragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n\ninterface INodeControl {\n    struct ValidatorState {\n        bytes dockerSha;\n        string dockerName;\n        bytes chainSpecSha;\n        string chainSpecUrl;\n        bool isSigning;\n        uint updateIntroduced;\n        uint updateConfirmed;\n    }\n\n    event UpdateAvailable(address indexed _targetValidator);\n\n    ///@notice Set the timestamp in the validatorstate\n    function confirmUpdate() external;\n\n    ///@notice Gets the state stored in the validatorstate mapping\n    ///@param _targetValidator The validator whos state you want\n    ///@return A struct representing the stored state for the validator\n    function retrieveExpectedState(address _targetValidator)\n        external\n        view\n        returns (ValidatorState memory);\n\n    ///@notice View function to check if a validator has updated to the latest state\n    ///@param _targetValidator The validator you want to check\n    ///@return True if it is up to date, false if not\n    function isUpdateConfirmed(address _targetValidator)\n        external\n        view\n        returns(bool);\n}\n","networks":"{}"}